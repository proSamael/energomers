<?php

namespace M236;


use EnergyMeters\SocketClient;
use EnergyMeters\utils;
use Exception;

// Формат запроса
// ------------------------------------------------------------------------------------------
// |Сетевой адрес |Код запроса |№ параметра |Байт расширения  | Параметры запроса  |CRC     |
// |1 байт        |1 байт      |0-1 байт    |0-1 байт         | ....байт           |2 байта |
// ------------------------------------------------------------------------------------------
// Формат запроса на открытие канала связи
// ---------------------------------------------------------------------
// |Сетевой адрес |Код запроса = 01h |Уровень доступа |Пароль | CRC    |
// |1 байт        |1 байт            |1 байт          |6 байт |2 байта |
// ---------------------------------------------------------------------
// Структура фрейма ответа
// ---------------------------------------------
// |Сетевой адрес |Поле данных ответа | CRC    |
// |1 байт        |1...16 байт        |2 байта |
// ---------------------------------------------

class Mercury
{

    /**
     * @var SocketClient
     */
    private SocketClient $client;
    private $serial;
    public static string $NAS = "\x00";
    // \x00         Универсальный
    // \x01…\xF0    Индивидуальный
    // \xFE         Широковещательный
    // \xF1…\xFF    Резерв
    public static array $srCRCHi = [
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
        0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40
    ];
    public static array $srCRCLo = [
        0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
        0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
        0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
        0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
        0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
        0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
        0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
        0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
        0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
        0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
        0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
        0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
        0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
        0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
        0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
        0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
        0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
        0x40
    ];
    const InitCRC = [0xFF, 0xFF];
    private string $addr;
    private string|bool $result;
    private Response $Response;
    private string $ping_time;
    private utils $utils;

    /**
     * @throws Exception
     */
    public function __construct($host, $port, $serial)
    {
        $this->utils = new Utils();
        $this->client = new SocketClient($host, $port);
        $this->serial = $serial;
        $this->Response = new Response();
        $this->addr = $this->getAddress();
    }

    /**
     * @throws Exception
     */
    function getAddress(): string
    {
        if(strlen($this->serial) > 6){
            $_last = substr($this->serial, -3);
            if($_last > 0 and $_last < 239){
                return bin2hex($_last);
            }elseif ($_last > 239){
                return bin2hex(substr($this->serial, -2));
            }elseif ($_last == 0){
                return bin2hex(1);
            }else{
                throw new Exception("Error getting address");
            }
        }else{
            throw new Exception("This serial number is too short");
        }

    }


    /**
     * @throws Exception
     */
    function get(): mixed
    {
        if($len = floor(strlen(bin2hex($this->result))/2) < 4){
            throw new Exception("Message too short for packed unpacking: ". strlen(bin2hex($this->result))/2 ." bytes");
        }
        $packed_crc_checksum = substr($this->result, strlen(bin2hex($this->result))/2-2, 2);
        $packed_addr = substr($this->result, 0, 1);
        $data = substr($this->result, 1, strlen(bin2hex($this->result))/2-1);
        $data = substr($data, 0, -2);
        echo 'response crc>> '.bin2hex($packed_crc_checksum).'</br>';
        echo 'response addr>> '.bin2hex($packed_addr).'</br>';
        echo 'response data>> '.bin2hex($data) ;
        $unpacked_data = unpack('C*', $data);
        /* Пример
        Array
        (
          [AddS] => fd
          [AddD] => 9ba7
          [Serv] => 57
          [AddHL] => 12f
          [Data1] => 12
          [Data2] => 7
          [Data3] => 23
          [Data4] => 88
          [Data5] => 0
          [Data6] => 0
          [Data7] => 0
          [Data8] => f5
        )
        */
        $function = $this->Response::$code;


        return call_user_func_array(array($this->Response, $function[$this->utils->hex2str($data[0])]), array($data, $this->ping_time));
    }



    /**
     * @throws Exception
     */
    public function Ping(): static
    {
        $this->ping_time = $this->utils->milliseconds();
        $this->sendPacked(__FUNCTION__,"");
        return $this;
    }

    private function getPacked($code = 0x00, $data = null): string
    {
        echo 'addr: ' . hex2bin($this->addr); echo '<br>';
        echo 'len: ' . strlen($code.$data); echo '<br>';
        $t =  pack("c*", $this->addr, $code.$data);
        return $t.$this->getCRC($t);
    }


    private function sendPacked($command)
    {

        $request = self::getPacked($this->Response->getCode($command));
        echo 'request >> '.bin2hex($request)."</br>";
        $this->client->sendRequest($request);
        $this->result = $this->client->getResponse();
        $this->client->close();

    }

    function getCRC($t): string //returns the bin crc
    {
        $length	= strlen($t);
        $uchCRCHi   = static::InitCRC[0];
        $uchCRCLo   = static::InitCRC[1];
        for ($i=0;$i<$length;$i++) {
            $uIndex   	= $uchCRCLo ^ ord(substr($t,$i,1));
            $uchCRCLo   = $uchCRCHi ^ static::$srCRCHi[$uIndex];
            $uchCRCHi   = static::$srCRCLo[$uIndex] ;
        }
        return(chr($uchCRCLo).chr($uchCRCHi));
    }



}